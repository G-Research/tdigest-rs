name: Create release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version - needs to adhere to Semantic Versioning (e.g. 0.3.1 or 0.3.1-rc.1)"
        required: true

jobs:
  create-release:
    name: Create release ${{ github.event.inputs.version }}
    environment: create-release
    runs-on: ubuntu-latest
    steps:
      # Regex comes from https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string
      - name: Check version
        id: version
        uses: actions/github-script@v7
        with:
          script: |
            const semver = /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/;
            const version = context.payload.inputs.version;
            const match = version.match(semver);
            if (match === null) {
              core.setFailed('Invalid version format. Expected semver compliant version.');
            } else {
              core.setOutput('tag', `v${version}`);
            }

      - name: Generate an app token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          fetch-depth: 0

      - name: Configure git
        run: |
          git config user.name "TDigest-rs CI"
          git config user.email "tdigest-rs@gr-oss.io"

      - name: Update version
        run: |
          version=${{ github.event.inputs.version }}
          echo "::group::Updating version to $version"
          cargo install cargo-edit
          cargo set-version $version
          git add Cargo.toml Cargo.lock bindings/python/Cargo.toml
          git commit -m "Release $version"
          git push
          echo "::endgroup::"

      - name: Create tag
        run: |
          tag=${{ steps.version.outputs.tag }}
          echo "::group::Creating tag $tag"
          git tag $tag
          git push origin $tag
          echo "::endgroup::"
