name: Python
on:
  workflow_call:

env:
  CARGO_TERM_COLOR: always
  DEFAULT_PYTHON_VERSION: "3.12"
  PIP_DISABLE_PIP_VERSION_CHECK: 1

permissions:
  contents: read

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ env.DEFAULT_PYTHON_VERSION }}
        uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: ${{ env.DEFAULT_PYTHON_VERSION }}
          check-latest: true
      - name: Lint
        run: pipx run --python '${{ steps.setup-python.outputs.python-path }}' hatch run dev:lint
        working-directory: bindings/python

  test:
    name: Test
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        runner: [ubuntu-latest, macos-13, macos-14, windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: ${{ matrix.python-version }}
          check-latest: true
      - name: Test
        run: pipx run --python '${{ steps.setup-python.outputs.python-path }}' hatch run dev:test
        working-directory: bindings/python

  build:
    name: Build (${{ matrix.name }})
    strategy:
      matrix:
        include:
          # Linux x86_64 - Modern server optimizations
          - runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: "Linux x86_64"
            rustflags: "-C target-cpu=haswell -C target-feature=+avx2,+sse2,+fma"
            features: ""
            manylinux: auto
          # Linux x86_64 musl - Conservative compatibility
          - runner: ubuntu-latest
            target: x86_64-unknown-linux-musl
            name: "Linux x86_64 (musl)"
            rustflags: "-C target-cpu=x86-64-v2"
            features: "fast"
            manylinux: auto
          # Linux ARM64 - AWS Graviton optimized
          - runner: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            name: "Linux ARM64"
            rustflags: "-C target-cpu=neoverse-n1"
            features: ""
            manylinux: auto
          # Linux ARM64 musl
          - runner: ubuntu-latest
            target: aarch64-unknown-linux-musl
            name: "Linux ARM64 (musl)"
            rustflags: "-C target-cpu=cortex-a72"
            features: ""
            manylinux: auto
          # macOS Intel - Broad compatibility
          - runner: macos-13
            target: x86_64-apple-darwin
            name: "macOS Intel"
            rustflags: "-C target-cpu=nehalem -C target-feature=+sse2"
            features: "fast"
            manylinux: "off"
          # macOS Apple Silicon - Native ARM64
          - runner: macos-14
            target: aarch64-apple-darwin
            name: "macOS ARM64"
            rustflags: "-C target-cpu=apple-a14"
            features: ""
            manylinux: "off"
          # Windows x86_64 - Modern baseline
          - runner: windows-latest
            target: x86_64-pc-windows-msvc
            name: "Windows x86_64"
            rustflags: "-C target-cpu=x86-64-v2"
            features: "fast"
            manylinux: "off"
      fail-fast: false
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v4

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: python-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build optimized Python wheels
        uses: PyO3/maturin-action@v1
        env:
          RUSTFLAGS: ${{ matrix.rustflags }}
          CARGO_BUILD_TARGET: ${{ matrix.target }}
        with:
          command: build
          args: --release --features ${{ matrix.features }} --locked
          manylinux: ${{ matrix.manylinux }}
          target: ${{ matrix.target }}
          working-directory: bindings/python

      - name: Test wheel installation
        if: matrix.target == 'x86_64-unknown-linux-gnu' || contains(matrix.target, 'darwin') || contains(matrix.target, 'windows')
        run: |
          pip install --find-links target/wheels tdigest-core --force-reinstall
          python -c "import tdigest_core; print('Successfully imported optimized tdigest_core')"
        working-directory: bindings/python

      - name: Upload Python Package
        uses: actions/upload-artifact@v4
        with:
          name: python-package-${{ matrix.target }}
          path: target/wheels/*.whl

  build-universal:
    name: Build Universal Wheels
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: python-universal-${{ hashFiles('**/Cargo.lock') }}

      - name: Build universal macOS wheel
        uses: PyO3/maturin-action@v1
        env:
          # Universal build with optimizations for both architectures
          RUSTFLAGS: "-C target-feature=+sse2"
        with:
          command: build
          args: --release --features fast --locked --universal2
          working-directory: bindings/python

      - name: Upload Universal Python Package
        uses: actions/upload-artifact@v4
        with:
          name: python-package-universal2-apple-darwin
          path: target/wheels/*.whl
